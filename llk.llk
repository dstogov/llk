%start          grammar
%case-sensetive true
%output         "llk_parser.php"
%language       "php"
%indent         "\t"

grammar($grammar):
		declaration($grammar)*
		prologue($grammar)?
		rule($grammar)*
		epilogue($grammar)?
;

declaration($grammar):
		"%start" ident($id)      { $grammar->start = $id; }
	|	"%sub-start" ident($id)  { $grammar->sub_start[] = $id; }
	|	"%case-sensetive"
	    (
	    	"true"               { $grammar->case_sensetive = true; }
		|
			"false"              { $grammar->case_sensetive = false; }
		)
	|	"%global-vars"
	    (
	    	"true"               { $grammar->global_vars = true; }
		|
			"false"              { $grammar->global_vars = false; }
		)
	|	"%lineno"
	    (
	    	"true"               { $grammar->leneno = true; }
		|
			"false"              { $grammar->lineno = false; }
		)
	|	"%linepos"
		(
			"true"               { $grammar->linepos = true; }
		|
			"false"              { $grammar->linepos = false; }
		)
	|	"%ignore-scanner"
		(
			"true"               { $grammar->ignore_scanner = true; }
		|
			"false"              { $grammar->ignore_scanner = false; }
		)
	|	"%ignore_parser"
		(
			"true"               { $grammar->ignore_parser = true; }
		|
			"false"              { $grammar->ignore_parser = false; }
		)
	|	"%sym-type" ident($id)   { $grammar->sym_type = $id; }
	|	"%check-id" ident($id)   { $grammar->check_id = $id; }
	|	"%output" string($s)     { $grammar->output = $s; }
	|	"%language" string($s)   { $grammar->language = $s; }
	|	"%indent" string($s)     { $grammar->indent = $s; }
	|	"%prefix" string($s)     { $grammar->prefix = $s; }
;

prologue($grammar):
		/%{(.)*?%}/ { $grammar->prologue = ltrim(get_text(2, 2)); }
;

epilogue($grammar):
		/%%.*/ { $grammar->epilogue = ltrim(get_text(2, 0)); }
;

rule($grammar):
        { $lexer = false; }
		(
			"@"
			{ $lexer = true; }
		) ?
		(
			ident($id)
			{ $attrs = null; }
		|
			ident_with_attrs($id, $attrs)
			")"
		)
		{ $code = null; }
		action($code) ?
		":"
		(
			expression($grammar, $gl, $gr)
			{
				complete_graph($gr);
				$nt = new NonTermDef($id, $attrs, $code, $gl);
				if ($lexer) {
					$nt->lexer = new LexerDef($id . "_get_sym", $id . "_get_sym");
				}
				if (!isset($grammar->nonterm[$id])) {
					$grammar->nonterm[$id] = $nt;
				} else {
					error("'$id' already defined");
				}
			}
		|
			regexp($gl, $gr)
			{ $rcode = null; }
			(
				action($rcode)
			) ?
			{
				complete_graph($gr);
				$r = new RegExp($id, $gl);
				$r->code = $rcode;
				if (!isset($grammar->term[$id])) {
					$grammar->term[$id] = new TermDef($id, count($grammar->term), true);
				} else {
					error("terminal '$id' already defined");
				}
				$nt = new NonTermDef($id, $attrs, $code, $r);
				$gl->name = $id;
				if (!isset($grammar->nonterm[$id])) {
					$grammar->nonterm[$id] = $nt;
				} else {
					error("non-terminal '$id' already defined");
				}
			}
		)
		";"
;

@ident_with_attrs(&$id, &$attrs):
		ident_plus($id)
		{ $attrs = array(); }
		(
			attr($attr)
			{ $attrs[] = $attr; }
			(
				","
				attr($attr)
				{ $attrs[] = $attr; }
			)* 
		)?
;

attr(&$attr):
		/[ \t]*[^,\(\) \t\r\n]+([ \t]+[^,\(\) \t\r\n]+)*/
		{ $attr = trim(get_text()); }
;

expression($grammar, &$gl, &$gr):
		{ $first = true; }
		alternative($grammar, $gl, $gr)
		(
			"|"
			{ $gl2 = $gr2 = null; }
			alternative($grammar, $gl2, $gr2)
			{
				if ($first) {
					make_first_alt($gl, $gr);
					$first = false;
				}
				concat_alt($gl, $gr, $gl2, $gr2);
			}
		) *
;

alternative($grammar, &$gl, &$gr):
		{$first = true;}
		(
			"&" factor($grammar, $gl2, $gr2)
			{
				$gl = $gr = make_pred($gl2, $gr2);
				if (!isset($grammar->pred[$gl->name])) {
					$grammar->pred[$gl->name] = $gl;
				}
				$first = false;
			}			
		|
			'!' factor($grammar, $gl2, $gr2)
			{
				$gl = $gr = make_pred($gl2, $gr2, true);
				if (!isset($grammar->pred[$gl->name])) {
					$grammar->pred[$gl->name] = $gl;
				}
				$first = false;
			}
		|
			'?' action($code)
			{
				$gl = $gr = new SemanticPredicate($code);
				$first = false;
			}
		)?
		(
			(
				term($grammar, $gl2, $gr2)
			|
				action($code)
				{ $gl2 = $gr2 = new Action($code); }
			)
			{
				if ($first) {
					$gl = $gl2; $gr = $gr2; $first = false;
				} else {
					concat_seq($gl, $gr, $gl2, $gr2);
				}
			}
		)*
		{ 
			if ($first) {
				$gl = $gr = new Epsilon();
			}
		}
;

term($grammar, &$gl, &$gr):
		factor($grammar, $gl, $gr)
		(	"?"  { make_opt($gl, $gr); }
		|	"?+" { make_opt($gl, $gr, true); }
		|	"??" { make_opt($gl, $gr, false); }
		|	"+"  { make_iter(1, $gl, $gr); }
		|	"++" { make_iter(1, $gl, $gr, true); }
		|	"+?" { make_iter(1, $gl, $gr, false); }
		|	"*"  { make_iter(0, $gl, $gr); }
		|	"*+" { make_iter(0, $gl, $gr, true); }
		|	"*?" { make_iter(0, $gl, $gr, false); }
		) ?
;

factor($grammar, &$gl, &$gr):
		terminal($t)
		{
			$gl = $gr = new Terminal($t);
			if (!isset($grammar->term[$t])) {
				$grammar->term[$t] = new TermDef($t, count($grammar->term));
			}
		}
	|	nonterminal($grammar, $nt)
		{ $gl = $gr = $nt; }
	|	"(" expression($grammar, $gl, $gr) ")"
;

nonterminal($grammar, &$nt):
		(
			ident($id)
	        { $attrs = null; }
		|	
			ident_with_attrs($id, $attrs)
			")"
		)
		{
			$nt = new NonTerminal($id);
			$nt->attrs = $attrs;
			$grammar->used[$id] = 1;
		}
;

terminal(&$s):
		string($s)
;

action(&$code):
		action_code($code) "}"
;

@action_code(&$code):
		"{"
		{ $code = ""; } // FIXME: no copy
		(
			action_char($ch)
			{ $code .= $ch; }
		| 
			action_code($s) "}"
			{ $code .= "{" . $s . "}"; }
		)*
;	

action_char(&$ch):
		/[^{]/ { $ch = get_text(); }
;

ident(&$id):
		/[A-Za-z_][A-Za-z0-9_]*/ { $id = get_text(); }
;

ident_plus(&$id):
		/[A-Za-z_][A-Za-z0-9_]*\(/ { $id = get_text(0, 1); }
;

regexp(&$gl, &$gr):
		regexp2($gl, $gr) "/"
;

@regexp2(&$gl, &$gr):
		"/" regex($gl, $gr)
;

regex(&$gl, &$gr):
		{ $first = true; }
		regex_alt($gl, $gr)
		(
			"|"
			regex_alt($gl2, $gr2)
			{
				if ($first) {
					make_first_alt($gl, $gr);
					$first = false;
				}
				concat_alt($gl, $gr, $gl2, $gr2);
			}
		) *
;

regex_alt(&$gl, &$gr):
		(
			{ $first = true; }
		    (
				regex_term($gl2, $gr2)
				{
					if ($first) {
						$gl = $gl2; $gr = $gr2; $first = false;
					} else {
						concat_seq($gl, $gr, $gl2, $gr2);
					}
				}
			) +
			(
				"//"
				regex_term($gl2, $gr2)
				{ set_ctx($gl2); concat_seq($gl, $gr, $gl2, $gr2); }
			) ?
		|
			{ $gl = $gr = new Epsilon(); }
		)
;

regex_term(&$gl, &$gr):
		regex_factor($gl, $gr)
		(	"?"  { make_opt($gl, $gr); }
		|	"?+" { make_opt($gl, $gr, true); }
		|	"??" { make_opt($gl, $gr, false); }
		|	"+"  { make_iter(1, $gl, $gr); }
		|	"++" { make_iter(1, $gl, $gr, true); }
		|	"+?" { make_iter(1, $gl, $gr, false); }
		|	"*"  { make_iter(0, $gl, $gr); }
		|	"*+" { make_iter(0, $gl, $gr, true); }
		|	"*?" { make_iter(0, $gl, $gr, false); }
		) ?
;

regex_factor(&$gl, &$gr):
		"."
		{ $gl = $gr = new Charset(true, array()); }
	|	regex_char($ch)
		{ $gl = $gr = new Character($ch); }
	|	"[" { $neg = false; } 
		("^" { $neg = true; } )?
		regex_char_class($set) "]"
		{ $gl = $gr = new Charset($neg, $set); }
	|	"(" regex($gl, $gr) ")"
;

regex_char(&$ch):
		escape_char($ch)
	|	escape_code($ch)
	|	single_char($ch)
;

escape_char(&$ch):
		/\\[^0-7]/
		{
			$ch = get_text(1);
			if ($ch === 'n') $ch = "\n";
			else if ($ch === 'r') $ch = "\r";
			else if ($ch === 't') $ch = "\t";
			else if ($ch === 'v') $ch = "\v";
			else if ($ch === 'f') $ch = "\f";
		}
;

escape_code(&$ch):
		/\\[0-7][0-7]?[0-7]?/
		{
			$oct = get_text(1);
			$dec = 0;
			for ($i = 0; $i < strlen($oct); $i++) {
				$dec = ($dec * 8) + ($oct[$i] - ord('0'));
			}
			$ch = chr($dec);
		}
;

single_char(&$ch):
		/[^\\\[\]\(\)\*\+\?\^\/\|\-\.]/ { $ch = get_text(); }
;

regex_char_class(&$set):
		{ $set = array(); }
		(
			regex_char($ch1)
			{ $set[$ch1] = 1; }
			(
				"-"
				regex_char($ch2)
				{
					for ($i = ord($ch1) + 1; $i <= ord($ch2); $i++) {
						$set[chr($i)] = 1;
					}
				}
			)?
		)+
;


string(&$s):
		/"([^"\\]|\\.)*"|'([^'\\]|\\.)*'/ { $s = stripcslashes(get_text(1, 1)); }
;

EOL:
		/\r\n|\r|\n/
;

WS:
		/[ \t\f\v]+/
;

ONE_LINE_COMMENT:
		/(\/\/)[^\r\n]*(\r\n|\r|\n)/
;

COMMENT:
		/\/\*([^\*]|\*+[^\*\/])*\*+\//
;

IGNORE:
		EOL | WS | ONE_LINE_COMMENT | COMMENT
;
